#colab
## Compare k-means to DBSCAN
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons

x,y = make_moons(n_samples=300, noise=0.05, random_state=42)
df=pd.DataFrame(x)
df.head()

plt.figure(figsize=(7,5))
plt.title("Before", fontsize=15)
plt.plot(df[0], df[1], "o")
plt.grid()
plt.show()


#TO-DO:
#1.   Use DBSCAN (use scikit-library) for clustering provided data points above
#*   Use eps=0.3, min_samples=5 (use default params for the others)
#2. Draw the scatter plot to visualize the result in step 1
#* Use "After - DBSCAN" title
#3. Use k-means (use scikit-library) for clustering provided data points above
#* Use n_clusters=2  (use default params for the others)
#4. Draw the scatter plot to visualize the result in step 3
#* Use "After - kMeans" title
#5. Discuss the resulting plots derived in step 2 and 4 and explain what makes such difference in clusters


from sklearn.cluster import DBSCAN
db_scan = DBSCAN(eps=0.3, min_samples=5).fit(df.values)
df['cluster_db'] = db_scan.labels_

# After DBSCAN
plt.figure(figsize=(7,5))
plt.title("After - DBSCAN", fontsize=15)
plt.scatter(df[0],df[1],c=df['cluster_db'])
plt.grid()
plt.show()

from sklearn.cluster import KMeans
kmeans_ = KMeans(n_clusters=2, random_state=42).fit(df.values)
df['cluster_km'] = kmeans_.labels_

# After kMeans
plt.figure(figsize=(7,5))
plt.title("After - KMeans", fontsize=15)
plt.scatter(df[0],df[1],c=df['cluster_km'])
plt.grid()
plt.show()

#<Discussion>
#The plots classified by DBSCAN showed that they were properly classified, but they were not properly classified by k-means clustering.
#The reason for this is that the moon dataset is a good example of the density-based feature. 
#And since K-means clustering analysis method has a feature that the centroid is updated by the mean, in the presence of data or outliers with geometric features, 
#k-means are likely to lead to distorted results.
